
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  127.0.0.1;

		default_type 'text/html';
		#charset utf-8;
		
        #charset koi8-r;

        #access_log  logs/host.access.log  main;
		
		#将本地文件夹D:\test\upload映射到url
		#http://127.0.0.1/upload/1.jpg（在D:\test\upload下存放1.jpg图片）
		location ^~ /upload/ {
			proxy_set_header Host $host;
	          proxy_set_header X-Real-IP $remote_addr;
	          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	          client_max_body_size 1024m;    #允许客户端请求的最大单文件字节数
	          client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，
	          proxy_connect_timeout 30;  #nginx跟后端服务器连接超时时间(代理连接超时)
	          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)
	          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)
	          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小
	          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
	          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
	          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            root D:/;
            rewrite ^/upload/(.*)$ /test/upload/$1 break;
        }

        location ^~ /api/ {
			proxy_pass   http://127.0.0.1:8004;  #反向代理
			proxy_set_header Host $host:$server_port;#解决刷新之后跳转回80端口
	          proxy_set_header X-Real-IP $remote_addr;
	          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			  proxy_redirect http://$host http://$host:$server_port;#解决刷新之后跳转回80端口
			  proxy_redirect off;#解决刷新之后跳转回80端口
			#proxy_cookie_domain http://127.0.0.1:80; #修改cookie里域名
			#proxy_pass  代理 (包含项目名)的url时 注意cookie的Path
			#proxy_set_header Host $host:$server_port; #模拟对方主机
			rewrite ^/api/(.*)$ /$1 break;
		}
		
		location ^~ /planShare/ {
			proxy_pass   http://127.0.0.1:8005;  #反向代理
			#proxy_cookie_domain http://127.0.0.1:80; #修改cookie里域名
			#proxy_pass  代理 (包含项目名)的url时 注意cookie的Path
			#proxy_set_header Host $host:$server_port; #模拟对方主机
			proxy_redirect off;
			proxy_connect_timeout 300;  #nginx跟后端服务器连接超时时间(代理连接超时)
			proxy_send_timeout 600;        #后端服务器数据回传时间(代理发送超时)
			proxy_read_timeout 600;         #连接成功后，后端服务器响应时间(代理接收超时)
			rewrite ^/dpapi/(.*)$ /$1 break;
		}
		
		
		location ^~ /dpapi/ {
			
			proxy_pass   http://127.0.0.1:8005;  #反向代理
			proxy_set_header Host $host;
	          proxy_set_header X-Real-IP $remote_addr;
	          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	          client_max_body_size 1024m;    #允许客户端请求的最大单文件字节数
	          client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，
	          proxy_connect_timeout 30;  #nginx跟后端服务器连接超时时间(代理连接超时)
	          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)
	          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)
	          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小
	          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
	          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
	          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
			rewrite ^/dpapi/(.*)$ /$1 break;
		}
		
		
		
		location / {
            proxy_pass   http://127.0.0.1:8080;  #前端工程
            index  login.html login.htm;
			proxy_set_header Host $host:$server_port;#解决刷新之后跳转回80端口
	          proxy_set_header X-Real-IP $remote_addr;
	          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			  proxy_redirect http://$host http://$host:$server_port;#解决刷新之后跳转回80端口
			  proxy_redirect off;#解决刷新之后跳转回80端口
			  
			add_header Access-Control-Allow-Credentials true;
			#如果需要使用wss，还需要加上如下配置：
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
			proxy_connect_timeout 30;  #nginx跟后端服务器连接超时时间(代理连接超时)
	          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)
	          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)
	          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小
	          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
	          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
	          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
        }
		
		location = /index {
            proxy_pass   http://127.0.0.1:8080;  #前端工程
			proxy_set_header Host $host:$server_port;#解决刷新之后跳转回80端口
	          proxy_set_header X-Real-IP $remote_addr;
	          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			  proxy_redirect http://$host http://$host:$server_port;#解决刷新之后跳转回80端口
			  proxy_redirect off;#解决刷新之后跳转回80端口
			proxy_connect_timeout 30;  #nginx跟后端服务器连接超时时间(代理连接超时)
	          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)
	          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)
	          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小
	          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
	          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
	          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            rewrite ^/index /templates/bigscreen/big_screen_all.html redirect;
        }
		
		location = /jxcsplan/jxcsplanAll {
            proxy_pass   http://127.0.0.1:8080;  #前端工程
			proxy_set_header Host $host:$server_port;#解决刷新之后跳转回80端口
	          proxy_set_header X-Real-IP $remote_addr;
	          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			  proxy_redirect http://$host http://$host:$server_port;#解决刷新之后跳转回80端口
			  proxy_redirect off;#解决刷新之后跳转回80端口
			proxy_connect_timeout 30;  #nginx跟后端服务器连接超时时间(代理连接超时)
	          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)
	          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)
	          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小
	          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
	          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
	          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            rewrite ^/jxcsplan/jxcsplanAll /templates/jxcsplan/jxcsplan_all.html redirect;
        }
		
		location = / {
            proxy_pass   http://127.0.0.1:8080;  #前端工程
			proxy_set_header Host $host:$server_port;#解决刷新之后跳转回80端口
	          proxy_set_header X-Real-IP $remote_addr;
	          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			  proxy_redirect http://$host http://$host:$server_port;#解决刷新之后跳转回80端口
			  proxy_redirect off;#解决刷新之后跳转回80端口
			proxy_connect_timeout 30;  #nginx跟后端服务器连接超时时间(代理连接超时)
	          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)
	          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)
	          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小
	          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
	          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
	          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            rewrite ^.*$ /templates/login.html redirect;
        }
		location = /shiro {
            proxy_pass   http://127.0.0.1:8080;  #前端工程
			proxy_set_header Host $host:$server_port;#解决刷新之后跳转回80端口
	          proxy_set_header X-Real-IP $remote_addr;
	          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			  proxy_redirect http://$host http://$host:$server_port;#解决刷新之后跳转回80端口
			  proxy_redirect off;#解决刷新之后跳转回80端口
			proxy_connect_timeout 30;  #nginx跟后端服务器连接超时时间(代理连接超时)
	          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)
	          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)
	          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小
	          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
	          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
	          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            rewrite ^.*$ /templates/bigscreen/big_screen_all.html redirect;
        }
		location ~ .*\.(css|js|gif|jpg|jpeg|bmp|png)$ {
            proxy_pass   http://127.0.0.1:8080;
			add_header Access-Control-Allow-Credentials true;
			#rewrite ^/(.*)$ /assets/$1 break;
        }
		
		location ~* \.(eot|ttf|ttc|otf|eot|woff|woff2|svg)$ {
			proxy_pass   http://127.0.0.1:8080;
			add_header Access-Control-Allow-Origin *;
			#rewrite ^/(.*)$ /assets/$1 break;
		}
		
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  127.0.0.1;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
